
name: CI

on:
  push:
    tags:
      - '**'
    branches:
      - '**'
      - '!gh-pages'
    paths-ignore:
      - '**.md'
      - 'docs/**'
  pull_request:
    branches:
      - trunk
    types:
      - opened
      - ready_for_review

jobs:
  test:
    runs-on: ${{matrix.os}}
    defaults:
      run:
        shell: bash
    strategy:
      matrix:
        os: [ubuntu-18.04, ubuntu-20.04, macOS-10.15]
    steps:
    -
      name: install dependencies ubuntu
      if: contains(matrix.os,'ubuntu')
      run: sudo apt-get update && sudo apt-get install libboost-all-dev
    -
      name: install dependencies macos
      if: contains(matrix.os,'macOS')
      run: brew install boost hdf5
    -
      name: install HighFive
      run: |
        mkdir src
        wget -q -O - \
          https://github.com/BlueBrain/HighFive/archive/refs/tags/v2.3.1.tar.gz |\
          tar -xz --strip-components=1 --directory src
        cmake -B src/build -S src
        cmake --build src/build
        cd src/build
        sudo make install
        cd -
        rm -rf src
    - 
      name: get fire
      uses: actions/checkout@v2
      with:
        submodules: 'recursive'
    -
      name: test fire
      run: |
        group Configure Build
        cmake -B build -S . 
        group Build fire
        cmake --build build
        group Test fire
        cmake --build build --target test
        group Install fire for Test Module
        cd build
        sudo make install
        cd -
        group Configure Test Module
        cmake -B build/test/module -S test/module
        group Build and Install Test Module
        cmake --build build/test/module
        cd build/test/module
        sudo make install
        cd -
        group Run Test Production
        ldmx fire test/module/produce.py 10
        group Run Test Reconstruction
        ldmx fire test/module/recon.py test/module/output_10.h5
  
  bench:
    needs: test
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    env:
      BENCH_OUTPUT_DIR: .github/workflows/output
      BENCH_DATA_FILE: .github/workflows/output/data.csv
      GITHUB_PR_NUMBER: ${{github.event.number}}
      N_TRIALS: 10
      NEVENT_SAMPLE_POINTS: "1 5 10 50 100 500 1000 5000 10000 100000 1000000"
    steps:
    - 
      name: get fire
      uses: actions/checkout@v2
      with:
        submodules: 'recursive'
    -
      name: bench developments
      run: |
        source .github/workflows/env.sh
        group Init Environment
        ldmx use dev hdf5
        ldmx base ..
        group Build fire
        ldmx cmake -B build -S . \
          -DBUILD_TESTING=OFF \
          -DCMAKE_INSTALL_PREFIX=${LDMX_BASE}/.container-install
        ldmx cmake --build build/ --target install
        group Build Test Module
        ldmx cmake -B build/test/module -S test/module \
          -DCMAKE_INSTALL_PREFIX=${LDMX_BASE}/.container-install
        ldmx cmake --build build/test/module --target install
        group Run Benchmark
        run_bench pr-${GITHUB_PR_NUMBER} ${N_TRIALS} ${NEVENT_SAMPLE_POINTS}
        group Cleanup
        git clean -xxfd -e ${BENCH_OUTPUT_DIR}
    -
      name: switch to trunk
      uses: actions/checkout@v2
      with:
        ref: 'trunk'
        submodules: 'recursive'
        clean: false
    -
      name: bench trunk
      run: |
        source .github/workflows/env.sh
        group Init Environment
        ldmx use dev hdf5
        ldmx base ..
        group Build fire
        ldmx cmake -B build -S . \
          -DBUILD_TESTING=OFF \
          -DCMAKE_INSTALL_PREFIX=${LDMX_BASE}/.container-install
        ldmx cmake --build build/ --target install
        group Build Test Module
        ldmx cmake -B build/test/module -S test/module \
          -DCMAKE_INSTALL_PREFIX=${LDMX_BASE}/.container-install
        ldmx cmake --build build/test/module --target install
        group Run Benchmark
        run_bench trunk ${N_TRIALS} ${NEVENT_SAMPLE_POINTS}
        group Cleanup
        git clean -xxfd -e ${BENCH_OUTPUT_DIR}
    -
      name: Setup Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'
    -
      name: Install Plotting Requirements
      run: python -m pip install --upgrade matplotlib pandas
    -
      name: Plot
      run: python .github/workflows/plot.py ${BENCH_DATA_FILE}
    -
      name: Upload Results
      uses: actions/upload-artifact@v2
      with:
        name: Benchmark-Results-PR-${{github.event.number}}
        path: ${{env.BENCH_OUTPUT_DIR}}
        if-no-files-found: error

  update-docs:
    needs: test
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-20.04
    steps:
      -
        name: checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          submodules: 'recursive' # for doxygen-awesome-css
      - 
        name: install doxygen 1.9.2
        run: |
          sudo apt-get update
          sudo apt-get install -y graphviz libclang-cpp1-9 libclang1-9
          wget https://www.doxygen.nl/files/doxygen-1.9.2.linux.bin.tar.gz
          tar -xvzf doxygen-1.9.2.linux.bin.tar.gz
          ln -s doxygen-1.9.2/bin/doxygen doxygen
      - 
        name: set version
        run: echo "PROJECT_NUMBER = `git describe --tags`" | tee -a docs/doxyfile
      - 
        name: run doxygen
        run: ./doxygen docs/doxyfile
      - 
        name: publish generated content
        uses: tsunematsu21/actions-publish-gh-pages@v1.0.1
        with:
          dir: docs/html
          branch: gh-pages
          token: ${{ secrets.LDMX_ORG_TOKEN }}
