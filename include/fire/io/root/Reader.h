#ifndef FIRE_IO_ROOT_READER_H_
#define FIRE_IO_ROOT_READER_H_

#include "TFile.h"
#include "TTree.h"
#include "TBranch.h"

#include "fire/io/Reader.h"
#include "fire/exception/Exception.h"
#include "fire/io/root/Bus.h"

/**
 * Reading of ROOT TTree files generated by ROOT-based Framework.
 *
 * The [ROOT-based Framework](https://github.com/LDMX-Software/Framework)
 * is a framework with similar design goals as fire, but built
 * using [CERN's ROOT](root.cern.ch) as its core serialization library.
 */
namespace fire::io::root {

/**
 * Reading ROOT files into our data structures
 *
 * If you are familiar with the ROOT-based Framework,
 * this Reader effectively does tasks done by the 
 * framework::Event and framework::EventFile classes.
 */
class Reader : public ::fire::io::Reader {
 public:
  Reader(const std::string& file_name);
  virtual void load_into(BaseData& d) final override;
  virtual std::vector<std::array<std::string,3>> availableObjects() final override;
  virtual std::string name() const final override;
  virtual std::size_t entries() const final override;
  virtual std::size_t runs() const final override;

  template <typename DataType>
  void load(const std::string& name, DataType& obj) {
    // transform h5 directory-style name into branchname
    // of ROOT-based framework
    std::string branch_name{transform(name)};

    if (not bus_.isOnBoard(branch_name)) {
      bus_.board<DataType>(branch_name);
      TBranch* br = bus_.attach(event_tree_, branch_name, false);
      if (br == 0) {
        throw Exception("NotFound", 
            "Branch "+branch_name+" not found in input ROOT file.");
      }
      br->SetStatus(1);
      auto i_entry{event_tree_->GetReadEntry()};
      if (i_entry < 0) {
        throw Exception("BadInit",
            "Reading TTree not initialized properly before load attempt.");
      }
      br->GetEntry(i_entry);
    }
    try {
      // deep copy, TODO: remove?
      obj = bus_.get<DataType>(branch_name);
    } catch(const std::bad_cast&) {
      throw Exception("BadType",
          "The input data type does not match what is stored within the ROOT TTree.");
    }
  }
  Reader(const Reader&) = delete;
  void operator=(const Reader&) = delete;
 private:
  /**
   * pull out pass and object name, construct branch name
   *
   * static caching map since this function is called so
   * frequently
   */
  static std::string transform(const std::string& dir_name);
 private:
  TFile* file_;
  TTree* event_tree_;
  TTree* run_tree_;
  Bus bus_;
};  // Reader

}  // namespace fire::root

#endif
